"use strict";

async function UrlExists(url) {
  return fetch(url, { method: "HEAD" }).then(r => r.status === 200);
}

/** Tries every possible path until versions.json is found */
async function getRootUrl() {
  let tmpRootUrl = window.location.href;
  while (tmpRootUrl !== "") {
    tmpRootUrl = tmpRootUrl.substr(0, tmpRootUrl.lastIndexOf("/"));
    if (await UrlExists(tmpRootUrl + "/versions.json")) {
      return tmpRootUrl;
    }
  }
  console.warning("versions.json not found, silently stopping execution");
  return undefined;
}

function getCurrentVersionFolder(rootUrl) {
  return window.location.href.substr(rootUrl.length + 1).split("/")[0];
}

async function generateInnerHtml(versionsJson, rootUrl) {
  // The menu was reverse-engineered from the RTD websites, so it's very
  // specific to the sphinx_rtd_theme
  const currentUrl = document.URL;
  const currentFolder = getCurrentVersionFolder(rootUrl);
  const currentVersion = versionsJson["labels"][currentFolder];
  let innerHtml = `
    <span class='rst-current-version' data-toggle='rst-current-version'>
      <span class='fa fa-book'> {% if not badge_only %}{{ menu_title }}{% endif%} </span>
      <span>${currentVersion}</span>
      <span class='fa fa-caret-down'></span>
    </span>
    <div class='rst-other-versions'>
      <div class='injected'>
        <dl>
          <dt>Versions</dt>
  `;
  for (let folder of versionsJson["versions"]) {
    if (folder == currentFolder) {
      innerHtml += `<strong><dd><a href='${currentUrl}'>${currentVersion}</a></dd></strong>`;
    } else {
      const folder_url = currentUrl.replace(currentFolder, folder);
      const folder_name = versionsJson["labels"][folder];
      innerHtml += `<dd><a href='${folder_url}'>${folder_name}</a></dd>`;
    }
  }
  let downloads = versionsJson["downloads"][currentFolder];
  if (downloads.length > 0) {
    innerHtml += "<dt>Downloads</dt>";
    for (let d of downloads) {
      let downloadLabel = d[0];
      let downloadUrl = d[1];
      if (!(/^(https?|ftp):/.test(downloadUrl))) {
        if (!downloadUrl.startsWith('/')) {
          downloadUrl = '/' + downloadUrl;
        }
        downloadUrl = root_url + downloadUrl;
      }
      innerHtml += `<dd><a href='${downloadUrl}'>${downloadLabel}</a></dd>`;
    }
  }
  innerHtml += `</dl><hr></div></div>`;
  return innerHtml
}


async function addVersionsMenu() {
  const rootUrl = await getRootUrl();
  if (rootUrl == undefined) {
    return ;
  }
  const jsonFile = rootUrl + "/versions.json";

  const response = await fetch(jsonFile, {
    method: 'GET',
    cache: 'no-cache',
  });
  const versionsJson = await response.json();

  // The menu was reverse-engineered from the RTD websites, so it's very
  // specific to the sphinx_rtd_theme
  const currentUrl = document.URL;
  const currentFolder = getCurrentVersionFolder(rootUrl);
  const menu = document.createElement('div');
  {%- if badge_only %}
  menu.setAttribute('class', 'rst-versions rst-badge');
  {%- else %}
  menu.setAttribute('class', 'rst-versions');
  {%- endif %}
  menu.setAttribute('data-toggle', 'rst-versions');
  menu.setAttribute('role', 'note');
  menu.setAttribute('aria-label', 'versions');
  const innerHtml = await generateInnerHtml(versionsJson, rootUrl);
  menu.innerHTML = innerHtml;
  const parent = document.body;
  parent.insertBefore(menu, parent.lastChild);

  // Add a warning banner for dev/outdated versions
  const currentVersionWarnings = versionsJson["warnings"][currentFolder];
  let warning = undefined;
  let msg = undefined;
  if (currentVersionWarnings.includes("outdated")) {
    warning = document.createElement('div');
    warning.setAttribute('class', 'admonition danger');
    msg = "This document is for an <strong>outdated version</strong>.";
  } else if (currentVersionWarnings.includes("unreleased")) {
    warning = document.createElement('div');
    warning.setAttribute('class', 'admonition danger');
    msg = "This document is for an <strong>unreleased development version</strong>.";
  } else if (currentVersionWarnings.includes("prereleased")) {
    warning = document.createElement('div');
    warning.setAttribute('class', 'admonition danger');
    msg = "This document is for a <strong>pre-release development version</strong>.";
  }
  if (warning !== undefined) {
    if (versionsJson["latest"] !== null) {
      const latestVersionUrl = currentUrl.replace(currentFolder, versionsJson["latest"]);
      msg += `
        Documentation is available for the
        <a href='${latestVersionUrl}'>latest public release</a>.
      `;
    }
    warning.innerHTML = `
      <p class='first admonition-title'>Note</p>
      <p class='last'>${msg}</p>
    `;
    const parent = document.querySelector('div.body')
      || document.querySelector('div.document')
      || document.body;
    parent.insertBefore(warning, parent.firstChild);
  }

  {%- if badge_only %}

  $("body").on('click', "div.rst-versions.rst-badge", function () {
    $('.rst-other-versions').toggle();
    $('.rst-versions .rst-current-version .fa-book').toggleClass('shift-up');
  });

  {%- endif %}
}

document.addEventListener('DOMContentLoaded', addVersionsMenu);
